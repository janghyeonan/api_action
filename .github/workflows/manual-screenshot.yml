name: Manual Screenshot Capture

on:
  workflow_dispatch:
    inputs:
      target_sites:
        description: 'Target websites'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'naver'
          - 'coupang'
          - 'musinsa'
          - 'google'
          - 'naver,coupang'
          - 'musinsa,google'
      
      delay_seconds:
        description: 'Delay between screenshots (1-30 seconds)'
        required: false
        default: '3'
        type: string
      
      viewport_width:
        description: 'Viewport width'
        required: false
        default: '1920'
        type: choice
        options:
          - '1920'
          - '1366'
          - '1440'
          - '1280'
          - '1024'
      
      viewport_height:
        description: 'Viewport height'
        required: false
        default: '1080'
        type: choice
        options:
          - '1080'
          - '768'
          - '900'
          - '720'
          - '768'
      
      full_page:
        description: 'Capture full page (vs viewport only)'
        required: false
        default: true
        type: boolean
      
      custom_message:
        description: 'Custom message for this capture'
        required: false
        default: 'Manual screenshot capture'
        type: string

jobs:
  manual-screenshot:
    runs-on: ubuntu-latest
    
    steps:
    - name: Print capture configuration
      run: |
        echo "📸 수동 스크린샷 캡처 설정"
        echo "==============================="
        echo "🎯 대상 사이트: ${{ github.event.inputs.target_sites }}"
        echo "⏱️ 딜레이: ${{ github.event.inputs.delay_seconds }}초"
        echo "📱 뷰포트: ${{ github.event.inputs.viewport_width }}x${{ github.event.inputs.viewport_height }}"
        echo "📄 전체 페이지: ${{ github.event.inputs.full_page }}"
        echo "💬 메시지: ${{ github.event.inputs.custom_message }}"
        echo "👤 실행자: ${{ github.actor }}"
        echo "🕐 시간: $(date)"
        echo "==============================="
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        playwright install chromium
        playwright install-deps
    
    - name: Create custom screenshot script
      run: |
        cat > custom_screenshot.py << 'EOF'
        import asyncio
        import os
        import sys
        from datetime import datetime
        from pathlib import Path
        from playwright.async_api import async_playwright
        
        async def capture_custom_screenshots():
            # 환경변수에서 설정값 가져오기
            target_sites = os.getenv('TARGET_SITES', 'all')
            delay = int(os.getenv('DELAY_SECONDS', '3'))
            width = int(os.getenv('VIEWPORT_WIDTH', '1920'))
            height = int(os.getenv('VIEWPORT_HEIGHT', '1080'))
            full_page = os.getenv('FULL_PAGE', 'true').lower() == 'true'
            custom_message = os.getenv('CUSTOM_MESSAGE', 'Manual capture')
            
            # 전체 사이트 목록
            all_sites = {
                'naver': {'url': 'https://www.naver.com', 'selector': '#NM_FAVORITE'},
                'coupang': {'url': 'https://www.coupang.com', 'selector': 'header'},
                'musinsa': {'url': 'https://www.musinsa.com', 'selector': '#header'},
                'google': {'url': 'https://www.google.com', 'selector': 'input[name="q"]'}
            }
            
            # 대상 사이트 선택
            if target_sites == 'all':
                selected_sites = all_sites
            else:
                site_names = [s.strip() for s in target_sites.split(',')]
                selected_sites = {name: all_sites[name] for name in site_names if name in all_sites}
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_dir = Path("screenshots")
            output_dir.mkdir(exist_ok=True)
            
            print(f"🚀 커스텀 스크린샷 캡처 시작")
            print(f"📋 설정: {width}x{height}, 딜레이 {delay}초, 전체페이지: {full_page}")
            print(f"🎯 대상: {list(selected_sites.keys())}")
            print(f"💬 메시지: {custom_message}")
            
            results = []
            
            async with async_playwright() as p:
                browser = await p.chromium.launch(
                    headless=True,
                    args=['--no-sandbox', '--disable-setuid-sandbox']
                )
                
                try:
                    for site_name, site_info in selected_sites.items():
                        print(f"\n📸 {site_name.upper()} 캡처 중...")
                        
                        try:
                            page = await browser.new_page()
                            await page.set_viewport_size({"width": width, "height": height})
                            
                            await page.goto(site_info['url'], wait_until="networkidle")
                            
                            if site_info.get('selector'):
                                try:
                                    await page.wait_for_selector(site_info['selector'], timeout=10000)
                                except:
                                    pass
                            
                            await asyncio.sleep(delay)
                            
                            screenshot_path = output_dir / f"{timestamp}_{site_name}.png"
                            await page.screenshot(
                                path=str(screenshot_path),
                                full_page=full_page,
                                type="png"
                            )
                            
                            title = await page.title()
                            file_size = os.path.getsize(screenshot_path)
                            
                            results.append({
                                'site': site_name,
                                'url': site_info['url'],
                                'title': title,
                                'file': str(screenshot_path),
                                'size': file_size,
                                'success': True
                            })
                            
                            print(f"✅ {site_name}: {title} ({file_size:,} bytes)")
                            
                            await page.close()
                            
                        except Exception as e:
                            print(f"❌ {site_name} 실패: {str(e)}")
                            results.append({
                                'site': site_name,
                                'url': site_info['url'],
                                'error': str(e),
                                'success': False
                            })
                
                finally:
                    await browser.close()
            
            # 결과 리포트 생성
            report_path = output_dir / f"{timestamp}_custom_report.txt"
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(f"커스텀 스크린샷 캡처 리포트\n")
                f.write(f"===========================\n")
                f.write(f"메시지: {custom_message}\n")
                f.write(f"뷰포트: {width}x{height}\n")
                f.write(f"딜레이: {delay}초\n")
                f.write(f"전체 페이지: {full_page}\n")
                f.write(f"생성 시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                success_count = sum(1 for r in results if r['success'])
                f.write(f"총 {len(results)}개 사이트, 성공 {success_count}개\n\n")
                
                for result in results:
                    if result['success']:
                        f.write(f"✅ {result['site'].upper()}\n")
                        f.write(f"   URL: {result['url']}\n")
                        f.write(f"   제목: {result['title']}\n")
                        f.write(f"   파일: {result['file']}\n")
                        f.write(f"   크기: {result['size']:,} bytes\n\n")
                    else:
                        f.write(f"❌ {result['site'].upper()}\n")
                        f.write(f"   URL: {result['url']}\n")
                        f.write(f"   오류: {result['error']}\n\n")
            
            print(f"\n📄 리포트 생성: {report_path}")
            print(f"🎉 캡처 완료: {success_count}/{len(results)} 성공")
            
            return results

        if __name__ == "__main__":
            asyncio.run(capture_custom_screenshots())
        EOF
    
    - name: Run custom screenshot capture
      env:
        TARGET_SITES: ${{ github.event.inputs.target_sites }}
        DELAY_SECONDS: ${{ github.event.inputs.delay_seconds }}
        VIEWPORT_WIDTH: ${{ github.event.inputs.viewport_width }}
        VIEWPORT_HEIGHT: ${{ github.event.inputs.viewport_height }}
        FULL_PAGE: ${{ github.event.inputs.full_page }}
        CUSTOM_MESSAGE: ${{ github.event.inputs.custom_message }}
      run: |
        echo "🎬 커스텀 스크린샷 캡처 시작..."
        python custom_screenshot.py
    
    - name: Validate screenshots
      run: |
        echo "🔍 스크린샷 검증 중..."
        
        cd screenshots
        PNG_COUNT=$(ls *.png 2>/dev/null | wc -l)
        
        if [ $PNG_COUNT -eq 0 ]; then
          echo "❌ 스크린샷이 생성되지 않았습니다!"
          exit 1
        fi
        
        echo "✅ $PNG_COUNT 개의 스크린샷이 생성되었습니다"
        
        # 각 파일 검증
        for file in *.png; do
          if [ -f "$file" ]; then
            size=$(wc -c < "$file")
            if [ $size -lt 1000 ]; then
              echo "⚠️ $file 파일이 너무 작습니다 ($size bytes)"
            else
              echo "✅ $file ($size bytes)"
            fi
          fi
        done
    
    - name: Generate advanced summary
      run: |
        echo "📊 고급 요약 정보 생성..."
        
        cd screenshots
        
        # 메타데이터 수집
        TOTAL_FILES=$(ls *.png 2>/dev/null | wc -l)
        TOTAL_SIZE=$(du -sh . | cut -f1)
        LARGEST_FILE=$(ls -lS *.png 2>/dev/null | head -1 | awk '{print $9 " (" $5 " bytes)"}')
        SMALLEST_FILE=$(ls -lrS *.png 2>/dev/null | head -1 | awk '{print $9 " (" $5 " bytes)"}')
        
        # 고급 요약 파일 생성
        cat > ../advanced_summary.md << EOF
        # 📸 스크린샷 캡처 결과 상세 리포트
        
        ## 📋 기본 정보
        - **실행자**: ${{ github.actor }}
        - **실행 시간**: $(date)
        - **워크플로우 번호**: #${{ github.run_number }}
        - **커스텀 메시지**: "${{ github.event.inputs.custom_message }}"
        
        ## ⚙️ 캡처 설정
        - **대상 사이트**: ${{ github.event.inputs.target_sites }}
        - **뷰포트 크기**: ${{ github.event.inputs.viewport_width }}x${{ github.event.inputs.viewport_height }}
        - **딜레이**: ${{ github.event.inputs.delay_seconds }}초
        - **전체 페이지**: ${{ github.event.inputs.full_page }}
        
        ## 📊 결과 통계
        - **총 파일 수**: ${TOTAL_FILES}개
        - **총 크기**: ${TOTAL_SIZE}
        - **가장 큰 파일**: ${LARGEST_FILE}
        - **가장 작은 파일**: ${SMALLEST_FILE}
        
        ## 📁 생성된 파일 목록
        EOF
        
        # 파일 목록 추가
        echo "" >> ../advanced_summary.md
        for file in *.png; do
          if [ -f "$file" ]; then
            size=$(du -h "$file" | cut -f1)
            echo "- \`$file\` - $size" >> ../advanced_summary.md
          fi
        done
        
        echo "" >> ../advanced_summary.md
        echo "---" >> ../advanced_summary.md
        echo "*이 리포트는 GitHub Actions에서 자동 생성되었습니다.*" >> ../advanced_summary.md
        
        cd ..
        echo "✅ 고급 요약 생성 완료"
        cat advanced_summary.md
    
    - name: Create interactive HTML gallery
      run: |
        echo "🎨 인터랙티브 갤러리 생성..."
        
        cat > screenshots/interactive_gallery.html << 'EOF'
        <!DOCTYPE html>
        <html lang="ko">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>📸 커스텀 스크린샷 갤러리</title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    padding: 20px;
                }
                
                .container {
                    max-width: 1400px;
                    margin: 0 auto;
                    background: rgba(255, 255, 255, 0.95);
                    border-radius: 20px;
                    padding: 40px;
                    backdrop-filter: blur(10px);
                    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
                }
                
                .header {
                    text-align: center;
                    margin-bottom: 40px;
                }
                
                .header h1 {
                    font-size: 2.5rem;
                    background: linear-gradient(45deg, #667eea, #764ba2);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    margin-bottom: 10px;
                }
                
                .config-info {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin-bottom: 40px;
                }
                
                .config-card {
                    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                    color: white;
                    padding: 20px;
                    border-radius: 15px;
                    text-align: center;
                }
                
                .config-card h3 {
                    font-size: 0.9rem;
                    opacity: 0.9;
                    margin-bottom: 5px;
                }
                
                .config-card p {
                    font-size: 1.2rem;
                    font-weight: bold;
                }
                
                .gallery {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                    gap: 30px;
                }
                
                .screenshot-card {
                    background: white;
                    border-radius: 20px;
                    overflow: hidden;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                    transition: all 0.3s ease;
                    position: relative;
                }
                
                .screenshot-card:hover {
                    transform: translateY(-10px);
                    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
                }
                
                .screenshot-img {
                    width: 100%;
                    height: 250px;
                    object-fit: cover;
                    cursor: pointer;
                    transition: transform 0.3s ease;
                }
                
                .screenshot-card:hover .screenshot-img {
                    transform: scale(1.05);
                }
                
                .card-content {
                    padding: 25px;
                }
                
                .site-name {
                    font-size: 1.5rem;
                    font-weight: bold;
                    color: #333;
                    margin-bottom: 10px;
                    text-transform: uppercase;
                }
                
                .site-url {
                    color: #666;
                    margin-bottom: 15px;
                    word-break: break-all;
                }
                
                .file-stats {
                    display: flex;
                    justify-content: space-between;
                    margin-top: 15px;
                    padding-top: 15px;
                    border-top: 1px solid #eee;
                    font-size: 0.9rem;
                    color: #888;
                }
                
                .modal {
                    display: none;
                    position: fixed;
                    z-index: 1000;
                    left: 0;
                    top: 0;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(0, 0, 0, 0.95);
                    backdrop-filter: blur(5px);
                }
                
                .modal-content {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    max-width: 95%;
                    max-height: 95%;
                    object-fit: contain;
                    border-radius: 10px;
                }
                
                .close {
                    position: absolute;
                    top: 20px;
                    right: 30px;
                    color: white;
                    font-size: 40px;
                    font-weight: bold;
                    cursor: pointer;
                    z-index: 1001;
                }
                
                .download-btn {
                    position: absolute;
                    bottom: 20px;
                    right: 30px;
                    background: #667eea;
                    color: white;
                    padding: 10px 20px;
                    border: none;
                    border-radius: 25px;
                    cursor: pointer;
                    text-decoration: none;
                    z-index: 1001;
                }
                
                @media (max-width: 768px) {
                    .container { padding: 20px; }
                    .header h1 { font-size: 2rem; }
                    .config-info { grid-template-columns: 1fr; }
                    .gallery { grid-template-columns: 1fr; }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>📸 커스텀 스크린샷 갤러리</h1>
                    <p>GitHub Actions로 생성된 웹사이트 스크린샷</p>
                </div>
                
                <div class="config-info">
                    <div class="config-card">
                        <h3>대상 사이트</h3>
                        <p>${{ github.event.inputs.target_sites }}</p>
                    </div>
                    <div class="config-card">
                        <h3>뷰포트 크기</h3>
                        <p>${{ github.event.inputs.viewport_width }}×${{ github.event.inputs.viewport_height }}</p>
                    </div>
                    <div class="config-card">
                        <h3>딜레이</h3>
                        <p>${{ github.event.inputs.delay_seconds }}초</p>
                    </div>
                    <div class="config-card">
                        <h3>실행자</h3>
                        <p>${{ github.actor }}</p>
                    </div>
                </div>
                
                <div class="gallery" id="gallery">
                    <!-- 스크린샷 카드들이 JavaScript로 동적 생성됩니다 -->
                </div>
            </div>
            
            <div id="modal" class="modal">
                <span class="close">&times;</span>
                <img class="modal-content" id="modal-img">
                <a class="download-btn" id="download-btn" download>다운로드</a>
            </div>
            
            <script>
                // 스크린샷 데이터 (실제로는 서버에서 가져와야 함)
                const screenshots = [
                    // 이 부분은 실제 파일 목록으로 대체됩니다
                ];
                
                // 갤러리 생성
                function createGallery() {
                    const gallery = document.getElementById('gallery');
                    const sites = ['naver', 'coupang', 'musinsa', 'google'];
                    
                    sites.forEach(site => {
                        const card = document.createElement('div');
                        card.className = 'screenshot-card';
                        card.innerHTML = `
                            <img src="${site}.png" alt="${site} 스크린샷" class="screenshot-img" 
                                 onclick="openModal('${site}.png')" onerror="this.style.display='none'">
                            <div class="card-content">
                                <div class="site-name">${site}</div>
                                <div class="site-url">스크린샷 이미지</div>
                                <div class="file-stats">
                                    <span>PNG 파일</span>
                                    <span id="${site}-size">-</span>
                                </div>
                            </div>
                        `;
                        gallery.appendChild(card);
                    });
                }
                
                // 모달 기능
                const modal = document.getElementById('modal');
                const modalImg = document.getElementById('modal-img');
                const downloadBtn = document.getElementById('download-btn');
                const closeBtn = document.querySelector('.close');
                
                function openModal(src) {
                    modal.style.display = 'block';
                    modalImg.src = src;
                    downloadBtn.href = src;
                    downloadBtn.download = src;
                }
                
                closeBtn.onclick = () => modal.style.display = 'none';
                modal.onclick = (e) => {
                    if (e.target === modal) modal.style.display = 'none';
                }
                
                // 키보드 이벤트
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape') modal.style.display = 'none';
                });
                
                // 페이지 로드 시 갤러리 생성
                createGallery();
            </script>
        </body>
        </html>
        EOF
        
        echo "✅ 인터랙티브 갤러리 생성 완료"
    
    - name: Upload custom artifacts
      uses: actions/upload-artifact@v3
      with:
        name: custom-screenshots-${{ github.run_number }}-${{ github.event.inputs.target_sites }}
        path: |
          screenshots/
          advanced_summary.md
        retention-days: 30
    
    - name: Display completion summary
      run: |
        echo ""
        echo "🎊 커스텀 스크린샷 캡처 완료!"
        echo "=================================="
        echo "✅ 설정:"
        echo "   🎯 대상: ${{ github.event.inputs.target_sites }}"
        echo "   📱 크기: ${{ github.event.inputs.viewport_width }}x${{ github.event.inputs.viewport_height }}"
        echo "   ⏱️ 딜레이: ${{ github.event.inputs.delay_seconds }}초"
        echo "   📄 전체: ${{ github.event.inputs.full_page }}"
        echo ""
        echo "📦 생성된 Artifact:"
        echo "   이름: custom-screenshots-${{ github.run_number }}-${{ github.event.inputs.target_sites }}"
        echo "   위치: Actions > 이 워크플로우 > Artifacts"
        echo ""
        echo "📁 포함된 파일:"
        echo "   📸 PNG 스크린샷 파일들"
        echo "   📄 상세 리포트 (TXT)"
        echo "   📊 고급 요약 (MD)"
        echo "   🎨 인터랙티브 갤러리 (HTML)"
        echo ""
        echo "💬 메시지: ${{ github.event.inputs.custom_message }}"
        echo "👤 실행자: ${{ github.actor }}"
        echo "🕐 완료 시간: $(date)"
